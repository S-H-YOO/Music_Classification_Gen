def conv_block(x, n_filters, pool_size=(2,2)) :
  x = Conv2D(n_filters, (3,3), strides=(1,1), padding='same')(x) 
  x = Activation('relu')(x) 
  x = MaxPooling2D(pool_size=pool_size, strides=pool_size)(x) 
  x = Dropout(0.5)(x)
  return x
 def create_model(input_shape, num_genres):
    inpt = Input(shape=input_shape)
    x = conv_block(inpt, 16)
    x = conv_block(x, 32)
    x = conv_block(x, 64)
    x = conv_block(x, 128)
    x = Flatten()(x)
    x = Dropout(0.5)(x)
    x = Dense(192, activation='relu',
              kernel_regularizer=tf.keras.regularizers.l2(0.02))(x)
    x = Dropout(0.25)(x)
    predictions = Dense(num_genres,
                        activation='softmax',
                        kernel_regularizer=tf.keras.regularizers.l2(0.02))(x)
    model = Model(inputs=inpt, outputs=predictions)
    return model
 model = create_model((288, 432, 3), 10)
 model.summary()


model.compile(loss = tf.keras.losses.categorical_crossentropy,
              optimizer = tf.keras.optimizers.Adam(),
              metrics = ['accuracy'])
 reduceLROnPlat = ReduceLROnPlateau(monitor = 'val_loss', factor = 0.895, patience = 3, verbose = 1,
    mode = 'min', min_delta = 0.0001, cooldown = 2, min_lr = 1e-5)
 batch_size = 32
 steps_per_epoch = np.ceil(len(x_train)/batch_size)
 history = model.fit(x_train, y_train, batch_size=32, validation_split = 0.2, epochs=150, verbose=1,
    callbacks=[reduceLROnPlat])
 model.save('/content/drive/MyDrive/deep24_model/cnn_best.h5')
